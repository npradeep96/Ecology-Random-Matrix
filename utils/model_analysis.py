"""
Module that performs different kinds onf analysis on the assembled model
"""

import numpy as np
import scipy.linalg as spl
import h5py
from joblib import Parallel, delayed


def compute_and_store_eigenvalues(model, target_file_name, num_matrix=1000,
	isparallel=True, numcores=16):
	"""
	Function that computes eigenvalues from a community matrix that belongs to ``model`` and stores it in ``target_directory``. 

	:param model: A model class object that was either defined by one of the classes in ``matrix_generation.py`` or assembled by ``model_assembly.py``
	:type model: model class object 
	:param target_file_name: Target filename to store the eigenvalues
	:type target_file_name: string
	:param num_matrix: Number of random matrices to sample to generate eigenvalues. Default value = 1000
	:type num_matrix: int
	:param isparallel: Whether to use embarassingly parallel loops to compute eigenvalues. Default = True
	:type isparallel: bool
	:param numcores: Number of cores to use in embarassingly parallel loops. Default = 16
	:type numcores: int
	"""
	
	def compute_eigenvalues(iteration_number, model, f):
		"""
		Function that computes the eigenvalues of community matrix in model for an individual iteration.
		"""
		np.random.seed(iteration_number)
		eigenvalues = spl.eigvals(model.generate_community_matrix())
		dataset_name = 'iteration_' + str(iteration_number)
		f.create_dataset(dataset_name, data=eigenvalues)

	with h5py.File(target_file_name, 'w') as f:
		parallel_function = lambda i: compute_eigenvalues(i, model, f)
		Parallel(n_jobs=numcores, prefer='threads')(
			delayed(parallel_function)(i) for i in range(num_matrix))

def calculate_probability_of_stability(model, eigenvalue_file_name, 
	num_matrix=1000):
	"""
	Function that computes the probability that the random matrices generated by this model are stable

	:param model: A model class object that was either defined by one of the classes in ``matrix_generation.py`` or assembled by ``model_assembly.py``
	:type model: model class object 
	:param eigenvalue_file_name: Filename of HDF5 file containing eigenvalues
	:type eigenvalue_file_name: string
	:param num_matrix: Number of random matrices to sample to generate eigenvalues. Default value = 1000
	:type num_matrix: int

	:return p: probability of stability 
	:rtype p: float
	"""
	# initialize the probability of stability to 0
	probability_of_stability = 0.0

	with h5py.File(eigenvalue_file_name, 'r') as f:
		for i in range(num_matrix):
			dataset_name = 'iteration_' + str(i)
			eigenvalues = f[dataset_name]
			real_values = np.real(eigenvalues)
			max_eigenvalue = np.max(real_values)
			if max_eigenvalue < 0.0:
				probability_of_stability = probability_of_stability + 1.0

	probability_of_stability = probability_of_stability/num_matrix
	return probability_of_stability

def write_analysis_data(target_file_name, data_description, value):
	"""
	Function that writes some data computed by the analysis functions to a target file

	:param target_file_name: The target file to write the data
	:type target_file_name: string
	:param data_description: Description of the quantity calculated from the analysis
	:type data_description: string
	:param value: Numerical value of the quantity calculated from the analysis
	:type value: float
	"""

	with open(target_file_name, 'a') as f:
		f.write(str(data_description) + ", " + str(value) + "\n")


